name: Windows Build

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    env:
      PYTHON_VERSION: "3.9"
      MODEL_DIR: models/base.en
      MODEL_CACHE_KEY: fasterwhisper-base-en-cache-v1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # ---------- Build EXE first (so we have dist/ ready) ----------
      - name: PyInstaller build
        shell: pwsh
        run: |
          pyinstaller --clean -y AV_OCR_Suite.spec
          if (-not (Test-Path dist\AV_OCR_Suite\AV_OCR_Suite.exe)) {
            Write-Error "PyInstaller output not found."
          }
          Get-ChildItem -Recurse dist\AV_OCR_Suite | Format-Table -AutoSize

      # ---------- Cache & pre-download Faster-Whisper model ----------
      - name: Cache faster-whisper model
        id: cache-model
        uses: actions/cache@v4
        with:
          path: ${{ env.MODEL_DIR }}
          key: ${{ env.MODEL_CACHE_KEY }}

      - name: Pre-download model (base.en)
        if: steps.cache-model.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          from pathlib import Path
          from faster_whisper import WhisperModel
          root = Path("models")
          root.mkdir(parents=True, exist_ok=True)
          WhisperModel("base.en", device="cpu", compute_type="int8", download_root=str(root))
          print("Model downloaded to", root / "base.en")
          PY

      # ---------- Stage runtime files into dist (icon, README, model) ----------
      - name: Stage runtime files into dist
        shell: pwsh
        run: |
          $ws   = "${{ github.workspace }}"
          $dist = Join-Path $ws 'dist\AV_OCR_Suite'
          if (-not (Test-Path $dist)) { Write-Error "PyInstaller output not found at $dist"; exit 1 }

          # icon
          $ico = Join-Path $ws 'av-ocr.ico'
          if (Test-Path $ico) { Copy-Item $ico $dist -Force }

          # README.txt (used by installer post-install checkbox)
          $readmeTxt = Join-Path $ws 'README.txt'
          $readmeMd  = Join-Path $ws 'README.md'
          if (Test-Path $readmeTxt) {
            Copy-Item $readmeTxt $dist -Force
          } elseif (Test-Path $readmeMd) {
            (Get-Content $readmeMd -Raw) | Set-Content (Join-Path $dist 'README.txt') -Encoding UTF8
          } else {
            "AV + OCR Suite`n`nGenerated README placeholder." | Set-Content (Join-Path $dist 'README.txt') -Encoding UTF8
          }

          # Copy the model if present (downloaded into ./models/base.en)
          $modelSrc = Join-Path $ws 'models\base.en'
          $modelDst = Join-Path $dist 'models\base.en'
          if (Test-Path $modelSrc) {
            New-Item -ItemType Directory -Force -Path $modelDst | Out-Null
            Copy-Item (Join-Path $modelSrc '*') $modelDst -Recurse -Force
            Write-Host "Staged model into $modelDst"
          } else {
            Write-Host 'NOTE: models\base.en not found; installer will be built without embedded model.'
          }

      # ---------- Optional: Sign the EXE if secrets provided ----------
      - name: Code sign EXE (optional)
        shell: pwsh
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          SIGNING_TIMESTAMP_URL: ${{ secrets.SIGNING_TIMESTAMP_URL }}
        run: |
          if (-not $env:WINDOWS_CERT_BASE64 -or -not $env:WINDOWS_CERT_PASSWORD -or -not $env:SIGNING_TIMESTAMP_URL) {
            Write-Host "Skipping EXE code signing (secrets not set)."
            exit 0
          }
          $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($env:WINDOWS_CERT_BASE64))
          & "$env:ProgramFiles (x86)\Windows Kits\10\App Certification Kit\signtool.exe" sign `
            /f "$pfxPath" /p "$env:WINDOWS_CERT_PASSWORD" `
            /tr "$env:SIGNING_TIMESTAMP_URL" /td sha256 /fd sha256 `
            dist\AV_OCR_Suite\AV_OCR_Suite.exe


      # ---------- Install Inno Setup & build installer ----------
      - name: Install Inno Setup
        shell: pwsh
        run: choco install innosetup --yes --no-progress

      - name: Build installer with Inno Setup
        shell: pwsh
        run: |
          $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
          $distAbs = (Resolve-Path "dist\AV_OCR_Suite").Path
          if (-not (Test-Path "$distAbs\AV_OCR_Suite.exe")) {
            Write-Error "PyInstaller output not found at $distAbs"; exit 1
          }
          iscc /Qp `
               "/OOutput" `
               "/DSourceDir=$distAbs" `
               installer\AV_OCR_Suite.iss

     # ---------- Optional: Sign the installer if secrets provided ----------
     - name: Code sign installer (optional)
       shell: pwsh
       env:
         WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
         WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
         SIGNING_TIMESTAMP_URL: ${{ secrets.SIGNING_TIMESTAMP_URL }}
       run: |
         if (-not $env:WINDOWS_CERT_BASE64 -or -not $env:WINDOWS_CERT_PASSWORD -or -not $env:SIGNING_TIMESTAMP_URL) {
           Write-Host "Skipping installer code signing (secrets not set)."
           exit 0
         }
         $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
         if (-not (Test-Path $pfxPath)) {
           [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($env:WINDOWS_CERT_BASE64))
         }
         $setup = Get-ChildItem -Recurse -Filter "*Setup*.exe" | Where-Object { $_.FullName -match "Output" } | Select-Object -First 1
         if (-not $setup) { Write-Error "Installer not found under Output/**"; exit 1 }
         & "$env:ProgramFiles (x86)\Windows Kits\10\App Certification Kit\signtool.exe" sign `
           /f "$pfxPath" /p "$env:WINDOWS_CERT_PASSWORD" `
           /tr "$env:SIGNING_TIMESTAMP_URL" /td sha256 /fd sha256 `
           "$($setup.FullName)"



      # ---------- Upload build artifacts ----------
      - name: Upload dist/
        uses: actions/upload-artifact@v4
        with:
          name: AV_OCR_Suite-dist
          path: dist/AV_OCR_Suite/**

      - name: Upload installer Output/
        uses: actions/upload-artifact@v4
        with:
          name: AV_OCR_Suite-setup
          path: |
            Output/**
            installer/Output/**
